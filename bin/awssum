#!/usr/bin/perl
## ----------------------------------------------------------------------------

use strict;
use warnings;

use Data::Dumper;
use JSON; # has pretty printing
use Config::Simple;
use Getopt::Mixed "nextOption";
use AwsSum::Flickr;
use AwsSum::PayPal;
use AwsSum::RackspaceCloud::Authenticate;
use AwsSum::RackspaceCloud::CloudServers;
use AwsSum::Amazon::EC2;

my $services = {
    'Flickr'                      => 1,
    'PayPal'                      => 1,
    'RackspaceCloud:Authenticate' => 1,
    'RackspaceCloud:CloudServers' => 1,
    'Amazon:EC2'                  => 1,
};

my $debug = 0;

## ----------------------------------------------------------------------------

{
    # take the first two parts off the input arguments
    my $service_name = shift;
    my $command = shift;

    unless ( defined $service_name and exists $services->{$service_name} ) {
        usage( 'Please provide a valid service name.' );
        exit 2;
    }

    # load up the config
    my $cfg = {};
    Config::Simple->import_from( "$ENV{HOME}/.awssum", $cfg );

    my $service;
    if ( $service_name eq 'Flickr' ) {
        $service = AwsSum::Flickr->new();
        $service->api_key( $cfg->{'Flickr-Key'} );
        $service->api_secret( $cfg->{'Flickr-Secret'} );
        $service->auth_token( $cfg->{'Flickr-AuthToken'} );
    }
    elsif ( $service_name eq 'PayPal' ) {
        $service = AwsSum::PayPal->new();
        $service->endpoint( $cfg->{'PayPal-Endpoint'} );
        $service->username( $cfg->{'PayPal-APIUsername'} );
        $service->password( $cfg->{'PayPal-APIPassword'} );
        $service->signature( $cfg->{'PayPal-APISignature'} );
    }
    elsif ( $service_name eq 'RackspaceCloud:Authenticate' ) {
        $service = AwsSum::RackspaceCloud::Authenticate->new();
        $service->user( $cfg->{'RackspaceCloud-User'} );
        $service->key( $cfg->{'RackspaceCloud-Key'} );
    }
    elsif ( $service_name eq 'RackspaceCloud:CloudServers' ) {
        $service = AwsSum::RackspaceCloud::CloudServers->new();
        $service->auth_token( $cfg->{'RackspaceCloud-AuthToken'} );
        $service->endpoint( $cfg->{'RackspaceCloud-ServerManagementURL'} );
    }
    elsif ( $service_name eq 'Amazon:EC2' ) {
        $service = AwsSum::Amazon::EC2->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );

        # set an endpoint (us-east-1, us-west-1, eu-west-1, ap-southeast-1)
        $service->endpoint( 'us-east-1' );
    }
    else {
        print STDERR "Provide a service name: flickr, paypal, ec2, etc\n";
        exit 2;
    }

    # check the command is valid (and has a method name to call)
    my $method = $service->command_sub_name( $command );
    unless ( $method ) {
        usage( 'Please provide a valid command.' );
        exit 2;
    }

    if ( $debug ) {
        dump_it('Command Opts Allowed', $service->command_opts($command)) ;
        dump_it('Command Opts Allowed (Booleans)', $service->command_opts_booleans($command));
    }

    # gather up all the args
    my $args = get_options(
        $service->command_opts($command),
        $service->command_opts_booleans($command),
    );

    # show this first, so the user can see what it thinks is correct
    dump_it('Input Args', $args);

    # do the command and pass it all the args (not worried about the return
    # value since it is in $service->data()
    $service->$method( $args );

    # output some info so we can see what was going on
    dump_it('URL', $service->url);
    dump_it('Headers', $service->headers);
    dump_it('Params', $service->params);
    if ( $debug ) {
        dump_it('HTTP Request', $service->req->as_string);
        dump_it('Headers', $service->res->as_string);
    }
    dump_it('Data', $service->data);
    line();
}

## ----------------------------------------------------------------------------

sub dump_it {
    my ($title, $thing) = @_;
    line();
    title($title);
    print to_json( $thing, { pretty => 1, allow_nonref => 1 } ), "\n";
}

sub title {
    my ($title) = @_;
    print "--- $title ", '-' x (74 - length($title)), "\n";
}

sub line {
    print '=' x 79, "\n";
}

sub get_options {
    my ($in_opts, $booleans) = @_;

    my $args = {};
    Getopt::Mixed::init( @$in_opts );
    while( my($opt, $val) = nextOption() ) {
        # if boolean, keep a count of how many there is only
        if ( exists $booleans->{$opt} ) {
            $args->{$opt}++;
            next;
        }
        # normal 'string' value
        if ( defined $args->{$opt} ) {
            unless ( ref $args->{$opt} eq 'ARRAY' ) {
                $args->{$opt} = [ $args->{$opt} ];
            }
            push @{$args->{$opt}}, $val;
        }
        else {
            $args->{$opt} = $val;
        }
    }
    Getopt::Mixed::cleanup();
    return $args;
}

sub usage {
    my ($msg) = @_;

    print STDERR <<"EOF";
$msg

Usage: $0 <service-name> <command> <opts...>

Services:
 - flickr
 - paypal
 - ec2

See <http://github.com/appsattic/awssum/> for further information.
Report bugs to <chilts -at- appsattic -dot- com>.

EOF
}

## ----------------------------------------------------------------------------
