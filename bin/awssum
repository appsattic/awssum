#!/usr/bin/perl
## ----------------------------------------------------------------------------

use strict;
use warnings;

use Data::Dumper;
use JSON; # has pretty printing
use Config::Simple;
use Getopt::Std;
use File::Slurp;
use AwsSum::Flickr;
use AwsSum::PayPal;
use AwsSum::RackspaceCloud::Authenticate;
use AwsSum::RackspaceCloud::CloudServers;
use AwsSum::Amazon::EC2;
use AwsSum::Amazon::ELB;
use AwsSum::Amazon::S3;
use AwsSum::Amazon::SQS;
use AwsSum::Amazon::RDS;
use AwsSum::Amazon::SimpleDB;
use AwsSum::Amazon::Route53;
use AwsSum::Amazon::CloudFront;
use AwsSum::OpenLibrary::OpenLibrary;
use AwsSum::Input;
use AwsSum::Google::Storage;

my $services = {
    'Flickr'                      => 1,
    'PayPal'                      => 1,
    'RackspaceCloud:Authenticate' => 1,
    'RackspaceCloud:CloudServers' => 1,
    'Amazon:EC2'                  => 1,
    'Amazon:ELB'                  => 1,
    'Amazon:S3'                   => 1,
    'Amazon:SQS'                  => 1,
    'Amazon:RDS'                  => 1,
    'Amazon:SimpleDB'             => 1,
    'Amazon:Route53'              => 1,
    'Amazon:CloudFront'           => 1,
    'OpenLibrary'                 => 1,
    'Google:Storage'              => 1,
};

my ($debug, $verbose);

## ----------------------------------------------------------------------------

{
    # process the incoming opts (for this executable, not for the commands)
    my $opts = process_opts({
        v => 'bool',
        d => 'bool',
        f => 'arg',
        i => 'array',
        h => 'bool',
    });
    $debug = exists $opts->{d};
    $verbose = exists $opts->{v} || exists $opts->{d};
    my $config_filename = $opts->{f} || $ENV{AWSSUM_CFG} || "$ENV{HOME}/.awssum";

    if ( $opts->{h} ) {
        usage();
        exit 2;
    }

    # take the first two parts off the input arguments
    my $service_name = shift;
    my $command = shift;

    unless ( defined $service_name and exists $services->{$service_name} ) {
        usage( 'Please provide a valid service name.' );
        exit 2;
    }

    # load up the config
    my $cfg = {};
    Config::Simple->import_from( $config_filename, $cfg );

    # load up the temporary file (ie. tokens) which are saved by the program,
    # e.g. for OAuth tokens
    my $user = getpwuid($<);
    my $tokens = {};
    Config::Simple->import_from( qq{/tmp/awssum-$user.cfg}, $tokens );

    my $service;
    if ( $service_name eq 'Flickr' ) {
        $service = AwsSum::Flickr->new();
        $service->api_key( $cfg->{'Flickr-Key'} );
        $service->api_secret( $cfg->{'Flickr-Secret'} );
        $service->auth_token( $tokens->{'Flickr-AuthToken'} )
            if $tokens->{'Flickr-AuthToken'};
    }
    elsif ( $service_name eq 'PayPal' ) {
        $service = AwsSum::PayPal->new();
        $service->endpoint( $cfg->{'PayPal-Endpoint'} );
        $service->username( $cfg->{'PayPal-APIUsername'} );
        $service->password( $cfg->{'PayPal-APIPassword'} );
        $service->signature( $cfg->{'PayPal-APISignature'} );
    }
    elsif ( $service_name eq 'RackspaceCloud:Authenticate' ) {
        $service = AwsSum::RackspaceCloud::Authenticate->new();
        $service->user( $cfg->{'RackspaceCloud-User'} );
        $service->key( $cfg->{'RackspaceCloud-Key'} );
    }
    elsif ( $service_name eq 'RackspaceCloud:CloudServers' ) {
        $service = AwsSum::RackspaceCloud::CloudServers->new();
        $service->auth_token( $cfg->{'RackspaceCloud-AuthToken'} );
        $service->endpoint( $cfg->{'RackspaceCloud-ServerManagementURL'} );
    }
    elsif ( $service_name eq 'Amazon:EC2' ) {
        $service = AwsSum::Amazon::EC2->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->region( $cfg->{'Amazon-EC2-Region'} )
            if $cfg->{'Amazon-EC2-Region'};
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:ELB' ) {
        $service = AwsSum::Amazon::ELB->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->region( $cfg->{'Amazon-ELB-Region'} );
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:S3' ) {
        $service = AwsSum::Amazon::S3->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->region( $cfg->{'Amazon-S3-Region'} )
            if $cfg->{'Amazon-S3-Region'};
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:SQS' ) {
        $service = AwsSum::Amazon::SQS->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:RDS' ) {
        $service = AwsSum::Amazon::RDS->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:SimpleDB' ) {
        $service = AwsSum::Amazon::SimpleDB->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:Route53' ) {
        $service = AwsSum::Amazon::Route53->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'Amazon:CloudFront' ) {
        $service = AwsSum::Amazon::CloudFront->new();
        $service->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
        $service->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
        $service->account_number( $cfg->{'Amazon-AccountNumber'} )
            if $cfg->{'Amazon-AccountNumber'};
    }
    elsif ( $service_name eq 'OpenLibrary' ) {
        $service = AwsSum::OpenLibrary::OpenLibrary->new();
    }
    elsif ( $service_name eq 'Google:Storage' ) {
        $service = AwsSum::Google::Storage->new();
        $service->id( $cfg->{'Google-Storage-ID'} );
        $service->access_key( $cfg->{'Google-Storage-AccessKey'} );
        $service->secret( $cfg->{'Google-Storage-Secret'} );
    }
    else {
        print STDERR "Provide a service name: flickr, paypal, ec2, etc\n";
        exit 2;
    }

    # check the command is valid (and has a method name to call)
    my $method = $service->command_sub_name( $command );
    unless ( $method ) {
        usage( 'Please provide a valid command.' );
        exit 2;
    }

    # parse the incoming args
    my $args = AwsSum::Input->process_args( $service_name, $command, @ARGV );

    # also, load up all of the input args (simple hash first)
    foreach my $i ( @{$opts->{i}} ) {
        my ($var, $filename) = split(':', $i, 2);
        if ( $var eq q{} ) {
            # load as the content
            $service->content( scalar read_file($filename) );
        }
        else {
            # load into a variable
            $args->{$var} = read_file($filename);
        }
    }

    my $inputs = AwsSum::Input->get_inputs_for( $service_name, $command );
    dump_it_debug('Opts Allowed', $inputs->{opts});
    dump_it_debug('Boolean Opts', $inputs->{bools});
    dump_it_debug('Hash Opts', $inputs->{hash});
    dump_it_debug('List Opts', $inputs->{list});

    # show this first, so the user can see what it thinks is correct
    dump_it_verbose('Input Args', $args);

    # do the command and pass it all the args (not worried about the return
    # value since it is in $service->data()
    eval {
        $service->$method( $args );
    };
    if ( $@ ) {
        print $@;
    }

    # output some info so we can see what was going on
    dump_it_verbose('HTTP Verb', uc $service->verb);
    dump_it_verbose('URL', $service->url);
    dump_it_verbose('Headers', $service->headers);
    dump_it_verbose('Params', $service->params);

    dump_it_debug('HTTP Request', $service->req->as_string)
        if $service->req;
    dump_it_debug('HTTP Response', $service->res->as_string)
        if $service->res;

    dump_it('Data', $service->data);
    line() if $verbose;
}

## ----------------------------------------------------------------------------

sub process_opts {
    my ($definition) = @_;

    # to save them
    my $opts = {};

    # loop through all the args
    my @remaining_args;
    while ( @ARGV ) {
        my $arg = shift @ARGV;
        unless ( $arg =~ m{ \A - ([a-z]) \z }xms ) {
            push @remaining_args, $arg;
            next;
        }

        # save only the letter
        $arg = $1;

        unless ( exists $definition->{$arg} ) {
            print STDERR "Error: unknown option '-$arg'\n";
            exit 2;
        }

        # check if this definition is true or false
        if ( $definition->{$arg} eq 'arg' ) {
            # requires an argument
            $opts->{$arg} = shift @ARGV;
            unless ( defined $opts->{$arg} ) {
                print STDERR "Error: option '$arg' requires a argument\n";
                exit 2;
            }
        }
        elsif ( $definition->{$arg} eq 'array' ) {
            # requires an argument
            my $v = shift @ARGV;
            unless ( defined $v ) {
                print STDERR "Error: option array '$arg' requires a argument\n";
                exit 2;
            }
            push @{$opts->{$arg}}, $v;
        }
        elsif ( $definition->{$arg} eq 'bool' ) {
            # boolean only
            $opts->{$arg} = 1;
        }
    }

    # put the remaining args back onto the global @ARGV
    @ARGV = @remaining_args;
    return $opts;
}

sub debug {
    my ($msg) = @_;
    print qq{DEBUG: $msg\n} if $debug;
}

sub verbose {
    my ($msg) = @_;
    print qq{$msg\n} if $verbose;
}

sub dump_it_debug {
    my ($title, $thing) = @_;
    dump_it($title, $thing) if $debug;
}

sub dump_it_verbose {
    my ($title, $thing) = @_;
    dump_it($title, $thing) if $verbose;
}

sub dump_it {
    my ($title, $thing) = @_;
    line();
    title($title);
    if ( ref $thing ) {
        print to_json( $thing, { pretty => 1, allow_nonref => 1, allow_blessed => 1, } ), "\n";
    }
    else {
        if ( defined $thing ) {
            print "$thing\n";
        }
        else {
            print "[undef]\n";
        }
    }
}

sub title {
    my ($title) = @_;
    print "--- $title ", '-' x (74 - length($title)), "\n" if $verbose;
}

sub line {
    print '=' x 79, "\n" if $verbose;
}

sub usage {
    my ($msg) = @_;

    if ( defined $msg ) {
        print "$msg\n\n";
    }

    print STDERR <<"EOF";
Usage: $0 <service-name> <command> [opts...] [parameters...]

Services:
  - Flickr
  - PayPal
  - RackspaceCloud:Authenticate
  - RackspaceCloud:CloudServers
  - Amazon:EC2
  - Amazon:S3

Commands:
  Commands are service dependent. Try 'awssum <service> -h' (ToDo).

Options:
  All options are service independent. All start with one dash.

  -v                     verbose, output more info
  -d                     debug, output even more info
  -i var:filename        loads contents of this file into this variable
  -i :filename           loads this file into the content of the HTTP Request
  -o var:filename        (ToDo) saves this returned value to a file
  -s filename            (ToDo) saves the returned content to a file
  -h                     prints help then quits
  -V                     (ToDo) prints version information then quits

Parameters:
  All parameters are service/command dependent. All start with two dashes.
  They can be nested to a reasonable level (see examples).

  i.e.
    --Id i-12            sets 'Id' to the value 'i-12'
    --Hash.Key hi        sets 'Hash{Key}' to 'hi'
    --Hash.Key.Name val  sets 'Hash{Key}{Name}' to 'val' (ToDo)
    --List.0 item        sets 'List[0]' to 'item'
    --List.0.Key value   sets 'List[0]{Key}' to 'value'
    --List.1.Key.0 value sets 'List[1]{Key}[0]' to 'value'
    --List.2.K.1.P value sets 'List[2]{K}[1]{P}' to 'value'

  e.g.
    --KeyName 'DNS Server KeyPair'
    --Monitoring.Enabled true
    --InstanceId.0 i-610c050b --InstanceId.1 i-a9b2aac3
    --IpPermissions.0.IpProtocol tcp --IpPermissions.0.ToPort 80

See <http://github.com/andychilton/awssum/> for further information.
Report bugs to <andychilton\@gmail.com>
EOF
}

## ----------------------------------------------------------------------------
